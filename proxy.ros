#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -L sbcl-bin -- $0 "$@"
|#
(progn ;;init forms
  (push :hunchentoot-no-ssl *features*)
  (ql:quickload '(:clack :dexador :daemon))
  (funcall (read-from-string "clack.util:find-handler") :hunchentoot)
  (funcall (read-from-string "lack.util:find-middleware") :backtrace)
  )

(defpackage :ros.script.proxy.3675921026
  (:use :cl))
(in-package :ros.script.proxy.3675921026)

(defvar *logpath* (ensure-directories-exist #P"/tmp/proxy-log"))

(defun puri (uri)
  (merge-pathnames (format nil ".rosproxy/~A"
                           (quri:url-encode uri))
                   (user-homedir-pathname)))

(defun main (&rest argv)
  (flet ((serve (output)
           (clack:clackup
            (lambda (env)
              (let (*print-pretty*)
                (format output "~{~2,'0d~^/~} ~A~%"
                        (cdddr (reverse (multiple-value-list (decode-universal-time (get-universal-time)))))
                        env))
              (force-output output)
              (if (and (eql (getf env :request-method) :get)
                       (probe-file (ensure-directories-exist
                                    (puri (getf env :request-uri)))))
                  `(200 () ,(puri (getf env :request-uri)))
                  (multiple-value-bind (content code header)
                      (dex:request (getf env :request-uri)
                                   :method (getf env :request-method)
                                   :force-binary t)
                    (when (eql (getf env :request-method) :get)
                      (with-open-file (out (puri(getf env :request-uri)) :direction :output :element-type '(unsigned-byte 8))
                        (write-sequence content out)))
                    `(,code (:content-type ,(gethash "content-type" header))
                            ,content))))
            :silent t)
           (loop while t do (sleep 1))))
    (if (find "daemon" argv :test 'equal)
        (with-open-file (out *logpath*
                             :direction :output
                             :if-does-not-exist :create
                             :if-exists :append)
          #-windows(daemon:daemonize :exit-parent t)
          (serve out))
        (serve *standard-output*))))

;;; vim: set ft=lisp lisp:
